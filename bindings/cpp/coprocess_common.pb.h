// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_common.proto

#ifndef PROTOBUF_INCLUDED_coprocess_5fcommon_2eproto
#define PROTOBUF_INCLUDED_coprocess_5fcommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fcommon_2eproto 

namespace protobuf_coprocess_5fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_coprocess_5fcommon_2eproto
namespace coprocess {
class StringSlice;
class StringSliceDefaultTypeInternal;
extern StringSliceDefaultTypeInternal _StringSlice_default_instance_;
}  // namespace coprocess
namespace google {
namespace protobuf {
template<> ::coprocess::StringSlice* Arena::CreateMaybeMessage<::coprocess::StringSlice>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace coprocess {

enum HookType {
  Unknown = 0,
  Pre = 1,
  Post = 2,
  PostKeyAuth = 3,
  CustomKeyCheck = 4,
  HookType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HookType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HookType_IsValid(int value);
const HookType HookType_MIN = Unknown;
const HookType HookType_MAX = CustomKeyCheck;
const int HookType_ARRAYSIZE = HookType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HookType_descriptor();
inline const ::std::string& HookType_Name(HookType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HookType_descriptor(), value);
}
inline bool HookType_Parse(
    const ::std::string& name, HookType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HookType>(
    HookType_descriptor(), name, value);
}
// ===================================================================

class StringSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coprocess.StringSlice) */ {
 public:
  StringSlice();
  virtual ~StringSlice();

  StringSlice(const StringSlice& from);

  inline StringSlice& operator=(const StringSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringSlice(StringSlice&& from) noexcept
    : StringSlice() {
    *this = ::std::move(from);
  }

  inline StringSlice& operator=(StringSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringSlice* internal_default_instance() {
    return reinterpret_cast<const StringSlice*>(
               &_StringSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StringSlice* other);
  friend void swap(StringSlice& a, StringSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringSlice* New() const final {
    return CreateMaybeMessage<StringSlice>(NULL);
  }

  StringSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringSlice& from);
  void MergeFrom(const StringSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_items(int index, ::std::string&& value);
  #endif
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  #if LANG_CXX11
  void add_items(::std::string&& value);
  #endif
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:coprocess.StringSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_coprocess_5fcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringSlice

// repeated string items = 1;
inline int StringSlice::items_size() const {
  return items_.size();
}
inline void StringSlice::clear_items() {
  items_.Clear();
}
inline const ::std::string& StringSlice::items(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.StringSlice.items)
  return items_.Get(index);
}
inline ::std::string* StringSlice::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.StringSlice.items)
  return items_.Mutable(index);
}
inline void StringSlice::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:coprocess.StringSlice.items)
  items_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringSlice::set_items(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:coprocess.StringSlice.items)
  items_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringSlice::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coprocess.StringSlice.items)
}
inline void StringSlice::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coprocess.StringSlice.items)
}
inline ::std::string* StringSlice::add_items() {
  // @@protoc_insertion_point(field_add_mutable:coprocess.StringSlice.items)
  return items_.Add();
}
inline void StringSlice::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coprocess.StringSlice.items)
}
#if LANG_CXX11
inline void StringSlice::add_items(::std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coprocess.StringSlice.items)
}
#endif
inline void StringSlice::add_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coprocess.StringSlice.items)
}
inline void StringSlice::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coprocess.StringSlice.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringSlice::items() const {
  // @@protoc_insertion_point(field_list:coprocess.StringSlice.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringSlice::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.StringSlice.items)
  return &items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocess

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::coprocess::HookType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coprocess::HookType>() {
  return ::coprocess::HookType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_coprocess_5fcommon_2eproto
