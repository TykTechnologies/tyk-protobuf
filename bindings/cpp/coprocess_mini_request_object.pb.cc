// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_mini_request_object.proto

#include "coprocess_mini_request_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_coprocess_5fmini_5frequest_5fobject_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fmini_5frequest_5fobject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_AddParamsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fmini_5frequest_5fobject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_ExtendedParamsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fmini_5frequest_5fobject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_HeadersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fmini_5frequest_5fobject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_ParamsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fmini_5frequest_5fobject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_SetHeadersEntry_DoNotUse;
}  // namespace protobuf_coprocess_5fmini_5frequest_5fobject_2eproto
namespace protobuf_coprocess_5freturn_5foverrides_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5freturn_5foverrides_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReturnOverrides;
}  // namespace protobuf_coprocess_5freturn_5foverrides_2eproto
namespace coprocess {
class MiniRequestObject_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject_HeadersEntry_DoNotUse>
      _instance;
} _MiniRequestObject_HeadersEntry_DoNotUse_default_instance_;
class MiniRequestObject_SetHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject_SetHeadersEntry_DoNotUse>
      _instance;
} _MiniRequestObject_SetHeadersEntry_DoNotUse_default_instance_;
class MiniRequestObject_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject_ParamsEntry_DoNotUse>
      _instance;
} _MiniRequestObject_ParamsEntry_DoNotUse_default_instance_;
class MiniRequestObject_AddParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject_AddParamsEntry_DoNotUse>
      _instance;
} _MiniRequestObject_AddParamsEntry_DoNotUse_default_instance_;
class MiniRequestObject_ExtendedParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject_ExtendedParamsEntry_DoNotUse>
      _instance;
} _MiniRequestObject_ExtendedParamsEntry_DoNotUse_default_instance_;
class MiniRequestObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MiniRequestObject>
      _instance;
} _MiniRequestObject_default_instance_;
}  // namespace coprocess
namespace protobuf_coprocess_5fmini_5frequest_5fobject_2eproto {
static void InitDefaultsMiniRequestObject_HeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject_HeadersEntry_DoNotUse();
  }
  ::coprocess::MiniRequestObject_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_HeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiniRequestObject_HeadersEntry_DoNotUse}, {}};

static void InitDefaultsMiniRequestObject_SetHeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_SetHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse();
  }
  ::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_SetHeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiniRequestObject_SetHeadersEntry_DoNotUse}, {}};

static void InitDefaultsMiniRequestObject_ParamsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject_ParamsEntry_DoNotUse();
  }
  ::coprocess::MiniRequestObject_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_ParamsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiniRequestObject_ParamsEntry_DoNotUse}, {}};

static void InitDefaultsMiniRequestObject_AddParamsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_AddParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse();
  }
  ::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_AddParamsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiniRequestObject_AddParamsEntry_DoNotUse}, {}};

static void InitDefaultsMiniRequestObject_ExtendedParamsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_ExtendedParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse();
  }
  ::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MiniRequestObject_ExtendedParamsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMiniRequestObject_ExtendedParamsEntry_DoNotUse}, {}};

static void InitDefaultsMiniRequestObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_MiniRequestObject_default_instance_;
    new (ptr) ::coprocess::MiniRequestObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::MiniRequestObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_MiniRequestObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsMiniRequestObject}, {
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject_HeadersEntry_DoNotUse.base,
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject_SetHeadersEntry_DoNotUse.base,
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject_ParamsEntry_DoNotUse.base,
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject_AddParamsEntry_DoNotUse.base,
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject_ExtendedParamsEntry_DoNotUse.base,
      &protobuf_coprocess_5freturn_5foverrides_2eproto::scc_info_ReturnOverrides.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject_HeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject_SetHeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject_ParamsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject_AddParamsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject_ExtendedParamsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MiniRequestObject.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_HeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ParamsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ParamsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ParamsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, set_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, delete_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, add_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, extended_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, delete_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, return_overrides_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, request_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, scheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::MiniRequestObject, raw_body_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::coprocess::MiniRequestObject_HeadersEntry_DoNotUse)},
  { 9, 16, sizeof(::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse)},
  { 18, 25, sizeof(::coprocess::MiniRequestObject_ParamsEntry_DoNotUse)},
  { 27, 34, sizeof(::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse)},
  { 36, 43, sizeof(::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse)},
  { 45, -1, sizeof(::coprocess::MiniRequestObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_SetHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_AddParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_ExtendedParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_MiniRequestObject_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "coprocess_mini_request_object.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#coprocess_mini_request_object.proto\022\tc"
      "oprocess\032 coprocess_return_overrides.pro"
      "to\"\232\006\n\021MiniRequestObject\022:\n\007headers\030\001 \003("
      "\0132).coprocess.MiniRequestObject.HeadersE"
      "ntry\022A\n\013set_headers\030\002 \003(\0132,.coprocess.Mi"
      "niRequestObject.SetHeadersEntry\022\026\n\016delet"
      "e_headers\030\003 \003(\t\022\014\n\004body\030\004 \001(\t\022\013\n\003url\030\005 \001"
      "(\t\0228\n\006params\030\006 \003(\0132(.coprocess.MiniReque"
      "stObject.ParamsEntry\022\?\n\nadd_params\030\007 \003(\013"
      "2+.coprocess.MiniRequestObject.AddParams"
      "Entry\022I\n\017extended_params\030\010 \003(\01320.coproce"
      "ss.MiniRequestObject.ExtendedParamsEntry"
      "\022\025\n\rdelete_params\030\t \003(\t\0224\n\020return_overri"
      "des\030\n \001(\0132\032.coprocess.ReturnOverrides\022\016\n"
      "\006method\030\013 \001(\t\022\023\n\013request_uri\030\014 \001(\t\022\016\n\006sc"
      "heme\030\r \001(\t\022\020\n\010raw_body\030\016 \001(\014\032.\n\014HeadersE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017"
      "SetHeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
      "alue\030\002 \001(\t:\0028\001\0320\n\016AddParamsEntry\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023ExtendedPara"
      "msEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 887);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "coprocess_mini_request_object.proto", &protobuf_RegisterTypes);
  ::protobuf_coprocess_5freturn_5foverrides_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_coprocess_5fmini_5frequest_5fobject_2eproto
namespace coprocess {

// ===================================================================

MiniRequestObject_HeadersEntry_DoNotUse::MiniRequestObject_HeadersEntry_DoNotUse() {}
MiniRequestObject_HeadersEntry_DoNotUse::MiniRequestObject_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MiniRequestObject_HeadersEntry_DoNotUse::MergeFrom(const MiniRequestObject_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MiniRequestObject_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[0];
}
void MiniRequestObject_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MiniRequestObject_SetHeadersEntry_DoNotUse::MiniRequestObject_SetHeadersEntry_DoNotUse() {}
MiniRequestObject_SetHeadersEntry_DoNotUse::MiniRequestObject_SetHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MiniRequestObject_SetHeadersEntry_DoNotUse::MergeFrom(const MiniRequestObject_SetHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MiniRequestObject_SetHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[1];
}
void MiniRequestObject_SetHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MiniRequestObject_ParamsEntry_DoNotUse::MiniRequestObject_ParamsEntry_DoNotUse() {}
MiniRequestObject_ParamsEntry_DoNotUse::MiniRequestObject_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MiniRequestObject_ParamsEntry_DoNotUse::MergeFrom(const MiniRequestObject_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MiniRequestObject_ParamsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[2];
}
void MiniRequestObject_ParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MiniRequestObject_AddParamsEntry_DoNotUse::MiniRequestObject_AddParamsEntry_DoNotUse() {}
MiniRequestObject_AddParamsEntry_DoNotUse::MiniRequestObject_AddParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MiniRequestObject_AddParamsEntry_DoNotUse::MergeFrom(const MiniRequestObject_AddParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MiniRequestObject_AddParamsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[3];
}
void MiniRequestObject_AddParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MiniRequestObject_ExtendedParamsEntry_DoNotUse::MiniRequestObject_ExtendedParamsEntry_DoNotUse() {}
MiniRequestObject_ExtendedParamsEntry_DoNotUse::MiniRequestObject_ExtendedParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MiniRequestObject_ExtendedParamsEntry_DoNotUse::MergeFrom(const MiniRequestObject_ExtendedParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MiniRequestObject_ExtendedParamsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[4];
}
void MiniRequestObject_ExtendedParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MiniRequestObject::InitAsDefaultInstance() {
  ::coprocess::_MiniRequestObject_default_instance_._instance.get_mutable()->return_overrides_ = const_cast< ::coprocess::ReturnOverrides*>(
      ::coprocess::ReturnOverrides::internal_default_instance());
}
void MiniRequestObject::clear_return_overrides() {
  if (GetArenaNoVirtual() == NULL && return_overrides_ != NULL) {
    delete return_overrides_;
  }
  return_overrides_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiniRequestObject::kHeadersFieldNumber;
const int MiniRequestObject::kSetHeadersFieldNumber;
const int MiniRequestObject::kDeleteHeadersFieldNumber;
const int MiniRequestObject::kBodyFieldNumber;
const int MiniRequestObject::kUrlFieldNumber;
const int MiniRequestObject::kParamsFieldNumber;
const int MiniRequestObject::kAddParamsFieldNumber;
const int MiniRequestObject::kExtendedParamsFieldNumber;
const int MiniRequestObject::kDeleteParamsFieldNumber;
const int MiniRequestObject::kReturnOverridesFieldNumber;
const int MiniRequestObject::kMethodFieldNumber;
const int MiniRequestObject::kRequestUriFieldNumber;
const int MiniRequestObject::kSchemeFieldNumber;
const int MiniRequestObject::kRawBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiniRequestObject::MiniRequestObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.MiniRequestObject)
}
MiniRequestObject::MiniRequestObject(const MiniRequestObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      delete_headers_(from.delete_headers_),
      delete_params_(from.delete_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  set_headers_.MergeFrom(from.set_headers_);
  params_.MergeFrom(from.params_);
  add_params_.MergeFrom(from.add_params_);
  extended_params_.MergeFrom(from.extended_params_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  request_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_uri().size() > 0) {
    request_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_uri_);
  }
  scheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scheme().size() > 0) {
    scheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  raw_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_body().size() > 0) {
    raw_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_body_);
  }
  if (from.has_return_overrides()) {
    return_overrides_ = new ::coprocess::ReturnOverrides(*from.return_overrides_);
  } else {
    return_overrides_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:coprocess.MiniRequestObject)
}

void MiniRequestObject::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_overrides_ = NULL;
}

MiniRequestObject::~MiniRequestObject() {
  // @@protoc_insertion_point(destructor:coprocess.MiniRequestObject)
  SharedDtor();
}

void MiniRequestObject::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete return_overrides_;
}

void MiniRequestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MiniRequestObject::descriptor() {
  ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MiniRequestObject& MiniRequestObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::scc_info_MiniRequestObject.base);
  return *internal_default_instance();
}


void MiniRequestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.MiniRequestObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  set_headers_.Clear();
  delete_headers_.Clear();
  params_.Clear();
  add_params_.Clear();
  extended_params_.Clear();
  delete_params_.Clear();
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && return_overrides_ != NULL) {
    delete return_overrides_;
  }
  return_overrides_ = NULL;
  _internal_metadata_.Clear();
}

bool MiniRequestObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.MiniRequestObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          MiniRequestObject_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MiniRequestObject_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> set_headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          MiniRequestObject_SetHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MiniRequestObject_SetHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&set_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.SetHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.SetHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string delete_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delete_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delete_headers(this->delete_headers_size() - 1).data(),
            static_cast<int>(this->delete_headers(this->delete_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.delete_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          MiniRequestObject_ParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MiniRequestObject_ParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.ParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> add_params = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          MiniRequestObject_AddParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MiniRequestObject_AddParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&add_params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.AddParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.AddParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> extended_params = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          MiniRequestObject_ExtendedParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MiniRequestObject_ExtendedParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&extended_params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.ExtendedParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.ExtendedParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string delete_params = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delete_params()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delete_params(this->delete_params_size() - 1).data(),
            static_cast<int>(this->delete_params(this->delete_params_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.delete_params"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .coprocess.ReturnOverrides return_overrides = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_return_overrides()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_uri = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_uri().data(), static_cast<int>(this->request_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.request_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scheme = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheme()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scheme().data(), static_cast<int>(this->scheme().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.MiniRequestObject.scheme"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_body = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.MiniRequestObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.MiniRequestObject)
  return false;
#undef DO_
}

void MiniRequestObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.MiniRequestObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> headers = 1;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> set_headers = 2;
  if (!this->set_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.SetHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.SetHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->set_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->set_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set_headers().begin();
          it != this->set_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_SetHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(set_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_SetHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set_headers().begin();
          it != this->set_headers().end(); ++it) {
        entry.reset(set_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string delete_headers = 3;
  for (int i = 0, n = this->delete_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delete_headers(i).data(), static_cast<int>(this->delete_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.delete_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->delete_headers(i), output);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->body(), output);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // map<string, string> params = 6;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> add_params = 7;
  if (!this->add_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.AddParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.AddParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->add_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->add_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add_params().begin();
          it != this->add_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_AddParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(add_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_AddParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add_params().begin();
          it != this->add_params().end(); ++it) {
        entry.reset(add_params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> extended_params = 8;
  if (!this->extended_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ExtendedParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ExtendedParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->extended_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extended_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extended_params().begin();
          it != this->extended_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_ExtendedParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extended_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_ExtendedParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extended_params().begin();
          it != this->extended_params().end(); ++it) {
        entry.reset(extended_params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string delete_params = 9;
  for (int i = 0, n = this->delete_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delete_params(i).data(), static_cast<int>(this->delete_params(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.delete_params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->delete_params(i), output);
  }

  // .coprocess.ReturnOverrides return_overrides = 10;
  if (this->has_return_overrides()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_return_overrides(), output);
  }

  // string method = 11;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->method(), output);
  }

  // string request_uri = 12;
  if (this->request_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_uri().data(), static_cast<int>(this->request_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.request_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->request_uri(), output);
  }

  // string scheme = 13;
  if (this->scheme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheme().data(), static_cast<int>(this->scheme().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.scheme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->scheme(), output);
  }

  // bytes raw_body = 14;
  if (this->raw_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->raw_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.MiniRequestObject)
}

::google::protobuf::uint8* MiniRequestObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.MiniRequestObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> headers = 1;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> set_headers = 2;
  if (!this->set_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.SetHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.SetHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->set_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->set_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set_headers().begin();
          it != this->set_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_SetHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(set_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_SetHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set_headers().begin();
          it != this->set_headers().end(); ++it) {
        entry.reset(set_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string delete_headers = 3;
  for (int i = 0, n = this->delete_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delete_headers(i).data(), static_cast<int>(this->delete_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.delete_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->delete_headers(i), target);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->body(), target);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // map<string, string> params = 6;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ParamsEntry.value");
      }
    };

    if (deterministic &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> add_params = 7;
  if (!this->add_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.AddParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.AddParamsEntry.value");
      }
    };

    if (deterministic &&
        this->add_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->add_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add_params().begin();
          it != this->add_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_AddParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(add_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_AddParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add_params().begin();
          it != this->add_params().end(); ++it) {
        entry.reset(add_params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> extended_params = 8;
  if (!this->extended_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ExtendedParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.MiniRequestObject.ExtendedParamsEntry.value");
      }
    };

    if (deterministic &&
        this->extended_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extended_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extended_params().begin();
          it != this->extended_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MiniRequestObject_ExtendedParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extended_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MiniRequestObject_ExtendedParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extended_params().begin();
          it != this->extended_params().end(); ++it) {
        entry.reset(extended_params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string delete_params = 9;
  for (int i = 0, n = this->delete_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delete_params(i).data(), static_cast<int>(this->delete_params(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.delete_params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->delete_params(i), target);
  }

  // .coprocess.ReturnOverrides return_overrides = 10;
  if (this->has_return_overrides()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_return_overrides(), deterministic, target);
  }

  // string method = 11;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->method(), target);
  }

  // string request_uri = 12;
  if (this->request_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_uri().data(), static_cast<int>(this->request_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.request_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->request_uri(), target);
  }

  // string scheme = 13;
  if (this->scheme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheme().data(), static_cast<int>(this->scheme().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.MiniRequestObject.scheme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->scheme(), target);
  }

  // bytes raw_body = 14;
  if (this->raw_body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->raw_body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.MiniRequestObject)
  return target;
}

size_t MiniRequestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.MiniRequestObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::std::unique_ptr<MiniRequestObject_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> set_headers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->set_headers_size());
  {
    ::std::unique_ptr<MiniRequestObject_SetHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->set_headers().begin();
        it != this->set_headers().end(); ++it) {
      entry.reset(set_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string delete_headers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->delete_headers_size());
  for (int i = 0, n = this->delete_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delete_headers(i));
  }

  // map<string, string> params = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  {
    ::std::unique_ptr<MiniRequestObject_ParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> add_params = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->add_params_size());
  {
    ::std::unique_ptr<MiniRequestObject_AddParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->add_params().begin();
        it != this->add_params().end(); ++it) {
      entry.reset(add_params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> extended_params = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extended_params_size());
  {
    ::std::unique_ptr<MiniRequestObject_ExtendedParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->extended_params().begin();
        it != this->extended_params().end(); ++it) {
      entry.reset(extended_params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string delete_params = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->delete_params_size());
  for (int i = 0, n = this->delete_params_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delete_params(i));
  }

  // string body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // string url = 5;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string method = 11;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // string request_uri = 12;
  if (this->request_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_uri());
  }

  // string scheme = 13;
  if (this->scheme().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scheme());
  }

  // bytes raw_body = 14;
  if (this->raw_body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_body());
  }

  // .coprocess.ReturnOverrides return_overrides = 10;
  if (this->has_return_overrides()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *return_overrides_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiniRequestObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.MiniRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MiniRequestObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MiniRequestObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.MiniRequestObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.MiniRequestObject)
    MergeFrom(*source);
  }
}

void MiniRequestObject::MergeFrom(const MiniRequestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.MiniRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  set_headers_.MergeFrom(from.set_headers_);
  delete_headers_.MergeFrom(from.delete_headers_);
  params_.MergeFrom(from.params_);
  add_params_.MergeFrom(from.add_params_);
  extended_params_.MergeFrom(from.extended_params_);
  delete_params_.MergeFrom(from.delete_params_);
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.request_uri().size() > 0) {

    request_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_uri_);
  }
  if (from.scheme().size() > 0) {

    scheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheme_);
  }
  if (from.raw_body().size() > 0) {

    raw_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_body_);
  }
  if (from.has_return_overrides()) {
    mutable_return_overrides()->::coprocess::ReturnOverrides::MergeFrom(from.return_overrides());
  }
}

void MiniRequestObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.MiniRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniRequestObject::CopyFrom(const MiniRequestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.MiniRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniRequestObject::IsInitialized() const {
  return true;
}

void MiniRequestObject::Swap(MiniRequestObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiniRequestObject::InternalSwap(MiniRequestObject* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  set_headers_.Swap(&other->set_headers_);
  delete_headers_.InternalSwap(CastToBase(&other->delete_headers_));
  params_.Swap(&other->params_);
  add_params_.Swap(&other->add_params_);
  extended_params_.Swap(&other->extended_params_);
  delete_params_.InternalSwap(CastToBase(&other->delete_params_));
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_uri_.Swap(&other->request_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scheme_.Swap(&other->scheme_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_body_.Swap(&other->raw_body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_overrides_, other->return_overrides_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MiniRequestObject::GetMetadata() const {
  protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fmini_5frequest_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coprocess
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject_HeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject_SetHeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject_ParamsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject_AddParamsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject_ExtendedParamsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::MiniRequestObject* Arena::CreateMaybeMessage< ::coprocess::MiniRequestObject >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::MiniRequestObject >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
