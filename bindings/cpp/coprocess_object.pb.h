// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_object.proto

#ifndef PROTOBUF_INCLUDED_coprocess_5fobject_2eproto
#define PROTOBUF_INCLUDED_coprocess_5fobject_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "coprocess_mini_request_object.pb.h"
#include "coprocess_session_state.pb.h"
#include "coprocess_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fobject_2eproto 

namespace protobuf_coprocess_5fobject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_coprocess_5fobject_2eproto
namespace coprocess {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventReply;
class EventReplyDefaultTypeInternal;
extern EventReplyDefaultTypeInternal _EventReply_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_MetadataEntry_DoNotUse;
class Object_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Object_MetadataEntry_DoNotUseDefaultTypeInternal _Object_MetadataEntry_DoNotUse_default_instance_;
class Object_SpecEntry_DoNotUse;
class Object_SpecEntry_DoNotUseDefaultTypeInternal;
extern Object_SpecEntry_DoNotUseDefaultTypeInternal _Object_SpecEntry_DoNotUse_default_instance_;
}  // namespace coprocess
namespace google {
namespace protobuf {
template<> ::coprocess::Event* Arena::CreateMaybeMessage<::coprocess::Event>(Arena*);
template<> ::coprocess::EventReply* Arena::CreateMaybeMessage<::coprocess::EventReply>(Arena*);
template<> ::coprocess::Object* Arena::CreateMaybeMessage<::coprocess::Object>(Arena*);
template<> ::coprocess::Object_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::coprocess::Object_MetadataEntry_DoNotUse>(Arena*);
template<> ::coprocess::Object_SpecEntry_DoNotUse* Arena::CreateMaybeMessage<::coprocess::Object_SpecEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace coprocess {

// ===================================================================

class Object_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Object_MetadataEntry_DoNotUse();
  Object_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Object_MetadataEntry_DoNotUse& other);
  static const Object_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Object_MetadataEntry_DoNotUse*>(&_Object_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Object_SpecEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Object_SpecEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Object_SpecEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Object_SpecEntry_DoNotUse();
  Object_SpecEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Object_SpecEntry_DoNotUse& other);
  static const Object_SpecEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Object_SpecEntry_DoNotUse*>(&_Object_SpecEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coprocess.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(NULL);
  }

  Object* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 5;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // map<string, string> spec = 6;
  int spec_size() const;
  void clear_spec();
  static const int kSpecFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      spec() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_spec();

  // string hook_name = 2;
  void clear_hook_name();
  static const int kHookNameFieldNumber = 2;
  const ::std::string& hook_name() const;
  void set_hook_name(const ::std::string& value);
  #if LANG_CXX11
  void set_hook_name(::std::string&& value);
  #endif
  void set_hook_name(const char* value);
  void set_hook_name(const char* value, size_t size);
  ::std::string* mutable_hook_name();
  ::std::string* release_hook_name();
  void set_allocated_hook_name(::std::string* hook_name);

  // .coprocess.MiniRequestObject request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  private:
  const ::coprocess::MiniRequestObject& _internal_request() const;
  public:
  const ::coprocess::MiniRequestObject& request() const;
  ::coprocess::MiniRequestObject* release_request();
  ::coprocess::MiniRequestObject* mutable_request();
  void set_allocated_request(::coprocess::MiniRequestObject* request);

  // .coprocess.SessionState session = 4;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  private:
  const ::coprocess::SessionState& _internal_session() const;
  public:
  const ::coprocess::SessionState& session() const;
  ::coprocess::SessionState* release_session();
  ::coprocess::SessionState* mutable_session();
  void set_allocated_session(::coprocess::SessionState* session);

  // .coprocess.HookType hook_type = 1;
  void clear_hook_type();
  static const int kHookTypeFieldNumber = 1;
  ::coprocess::HookType hook_type() const;
  void set_hook_type(::coprocess::HookType value);

  // @@protoc_insertion_point(class_scope:coprocess.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Object_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::MapField<
      Object_SpecEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > spec_;
  ::google::protobuf::internal::ArenaStringPtr hook_name_;
  ::coprocess::MiniRequestObject* request_;
  ::coprocess::SessionState* session_;
  int hook_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_coprocess_5fobject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coprocess.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:coprocess.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_coprocess_5fobject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:coprocess.EventReply) */ {
 public:
  EventReply();
  virtual ~EventReply();

  EventReply(const EventReply& from);

  inline EventReply& operator=(const EventReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventReply(EventReply&& from) noexcept
    : EventReply() {
    *this = ::std::move(from);
  }

  inline EventReply& operator=(EventReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventReply* internal_default_instance() {
    return reinterpret_cast<const EventReply*>(
               &_EventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EventReply* other);
  friend void swap(EventReply& a, EventReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventReply* New() const final {
    return CreateMaybeMessage<EventReply>(NULL);
  }

  EventReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventReply& from);
  void MergeFrom(const EventReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coprocess.EventReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_coprocess_5fobject_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Object

// .coprocess.HookType hook_type = 1;
inline void Object::clear_hook_type() {
  hook_type_ = 0;
}
inline ::coprocess::HookType Object::hook_type() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.hook_type)
  return static_cast< ::coprocess::HookType >(hook_type_);
}
inline void Object::set_hook_type(::coprocess::HookType value) {
  
  hook_type_ = value;
  // @@protoc_insertion_point(field_set:coprocess.Object.hook_type)
}

// string hook_name = 2;
inline void Object::clear_hook_name() {
  hook_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::hook_name() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.hook_name)
  return hook_name_.GetNoArena();
}
inline void Object::set_hook_name(const ::std::string& value) {
  
  hook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocess.Object.hook_name)
}
#if LANG_CXX11
inline void Object::set_hook_name(::std::string&& value) {
  
  hook_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:coprocess.Object.hook_name)
}
#endif
inline void Object::set_hook_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocess.Object.hook_name)
}
inline void Object::set_hook_name(const char* value, size_t size) {
  
  hook_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocess.Object.hook_name)
}
inline ::std::string* Object::mutable_hook_name() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.Object.hook_name)
  return hook_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_hook_name() {
  // @@protoc_insertion_point(field_release:coprocess.Object.hook_name)
  
  return hook_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_hook_name(::std::string* hook_name) {
  if (hook_name != NULL) {
    
  } else {
    
  }
  hook_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hook_name);
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.hook_name)
}

// .coprocess.MiniRequestObject request = 3;
inline bool Object::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::coprocess::MiniRequestObject& Object::_internal_request() const {
  return *request_;
}
inline const ::coprocess::MiniRequestObject& Object::request() const {
  const ::coprocess::MiniRequestObject* p = request_;
  // @@protoc_insertion_point(field_get:coprocess.Object.request)
  return p != NULL ? *p : *reinterpret_cast<const ::coprocess::MiniRequestObject*>(
      &::coprocess::_MiniRequestObject_default_instance_);
}
inline ::coprocess::MiniRequestObject* Object::release_request() {
  // @@protoc_insertion_point(field_release:coprocess.Object.request)
  
  ::coprocess::MiniRequestObject* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::coprocess::MiniRequestObject* Object::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::coprocess::MiniRequestObject>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coprocess.Object.request)
  return request_;
}
inline void Object::set_allocated_request(::coprocess::MiniRequestObject* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.request)
}

// .coprocess.SessionState session = 4;
inline bool Object::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline const ::coprocess::SessionState& Object::_internal_session() const {
  return *session_;
}
inline const ::coprocess::SessionState& Object::session() const {
  const ::coprocess::SessionState* p = session_;
  // @@protoc_insertion_point(field_get:coprocess.Object.session)
  return p != NULL ? *p : *reinterpret_cast<const ::coprocess::SessionState*>(
      &::coprocess::_SessionState_default_instance_);
}
inline ::coprocess::SessionState* Object::release_session() {
  // @@protoc_insertion_point(field_release:coprocess.Object.session)
  
  ::coprocess::SessionState* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::coprocess::SessionState* Object::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::coprocess::SessionState>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:coprocess.Object.session)
  return session_;
}
inline void Object::set_allocated_session(::coprocess::SessionState* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(session_);
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.session)
}

// map<string, string> metadata = 5;
inline int Object::metadata_size() const {
  return metadata_.size();
}
inline void Object::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Object::metadata() const {
  // @@protoc_insertion_point(field_map:coprocess.Object.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Object::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.Object.metadata)
  return metadata_.MutableMap();
}

// map<string, string> spec = 6;
inline int Object::spec_size() const {
  return spec_.size();
}
inline void Object::clear_spec() {
  spec_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Object::spec() const {
  // @@protoc_insertion_point(field_map:coprocess.Object.spec)
  return spec_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Object::mutable_spec() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.Object.spec)
  return spec_.MutableMap();
}

// -------------------------------------------------------------------

// Event

// string payload = 1;
inline void Event::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::payload() const {
  // @@protoc_insertion_point(field_get:coprocess.Event.payload)
  return payload_.GetNoArena();
}
inline void Event::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocess.Event.payload)
}
#if LANG_CXX11
inline void Event::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:coprocess.Event.payload)
}
#endif
inline void Event::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocess.Event.payload)
}
inline void Event::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocess.Event.payload)
}
inline ::std::string* Event::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.Event.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_payload() {
  // @@protoc_insertion_point(field_release:coprocess.Event.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:coprocess.Event.payload)
}

// -------------------------------------------------------------------

// EventReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocess

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_coprocess_5fobject_2eproto
