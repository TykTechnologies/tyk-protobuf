// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coprocess_object.proto
#ifndef GRPC_coprocess_5fobject_2eproto__INCLUDED
#define GRPC_coprocess_5fobject_2eproto__INCLUDED

#include "coprocess_object.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace coprocess {

class Dispatcher final {
 public:
  static constexpr char const* service_full_name() {
    return "coprocess.Dispatcher";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Dispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::coprocess::Object* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>> AsyncDispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>>(AsyncDispatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>> PrepareAsyncDispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>>(PrepareAsyncDispatchRaw(context, request, cq));
    }
    virtual ::grpc::Status DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::coprocess::EventReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>> AsyncDispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>>(AsyncDispatchEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>> PrepareAsyncDispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>>(PrepareAsyncDispatchEventRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Dispatch(::grpc::ClientContext* context, const ::coprocess::Object* request, ::coprocess::Object* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>* AsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::Object>* PrepareAsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>* AsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocess::EventReply>* PrepareAsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Dispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::coprocess::Object* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::Object>> AsyncDispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::Object>>(AsyncDispatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::Object>> PrepareAsyncDispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::Object>>(PrepareAsyncDispatchRaw(context, request, cq));
    }
    ::grpc::Status DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::coprocess::EventReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>> AsyncDispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>>(AsyncDispatchEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>> PrepareAsyncDispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>>(PrepareAsyncDispatchEventRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Dispatch(::grpc::ClientContext* context, const ::coprocess::Object* request, ::coprocess::Object* response, std::function<void(::grpc::Status)>) override;
      void DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::coprocess::Object>* AsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coprocess::Object>* PrepareAsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>* AsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>* PrepareAsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Dispatch_;
    const ::grpc::internal::RpcMethod rpcmethod_DispatchEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response);
    virtual ::grpc::Status DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Dispatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Dispatch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Dispatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatch(::grpc::ServerContext* context, ::coprocess::Object* request, ::grpc::ServerAsyncResponseWriter< ::coprocess::Object>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DispatchEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DispatchEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DispatchEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchEvent(::grpc::ServerContext* context, ::coprocess::Event* request, ::grpc::ServerAsyncResponseWriter< ::coprocess::EventReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Dispatch<WithAsyncMethod_DispatchEvent<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Dispatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Dispatch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Dispatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DispatchEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DispatchEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DispatchEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dispatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Dispatch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Dispatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DispatchEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DispatchEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DispatchEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dispatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Dispatch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::coprocess::Object, ::coprocess::Object>(std::bind(&WithStreamedUnaryMethod_Dispatch<BaseClass>::StreamedDispatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Dispatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDispatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coprocess::Object,::coprocess::Object>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DispatchEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DispatchEvent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::coprocess::Event, ::coprocess::EventReply>(std::bind(&WithStreamedUnaryMethod_DispatchEvent<BaseClass>::StreamedDispatchEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DispatchEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDispatchEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coprocess::Event,::coprocess::EventReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Dispatch<WithStreamedUnaryMethod_DispatchEvent<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Dispatch<WithStreamedUnaryMethod_DispatchEvent<Service > > StreamedService;
};

}  // namespace coprocess


#endif  // GRPC_coprocess_5fobject_2eproto__INCLUDED
