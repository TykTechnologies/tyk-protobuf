// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_session_state.proto

#include "coprocess_session_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_coprocess_5fsession_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccessSpec;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasicAuthData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JWTData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Monitor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SessionState_OauthKeysEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccessDefinition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_coprocess_5fsession_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SessionState_AccessRightsEntry_DoNotUse;
}  // namespace protobuf_coprocess_5fsession_5fstate_2eproto
namespace coprocess {
class AccessSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessSpec>
      _instance;
} _AccessSpec_default_instance_;
class AccessDefinitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessDefinition>
      _instance;
} _AccessDefinition_default_instance_;
class BasicAuthDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicAuthData>
      _instance;
} _BasicAuthData_default_instance_;
class JWTDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JWTData>
      _instance;
} _JWTData_default_instance_;
class MonitorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Monitor>
      _instance;
} _Monitor_default_instance_;
class SessionState_AccessRightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionState_AccessRightsEntry_DoNotUse>
      _instance;
} _SessionState_AccessRightsEntry_DoNotUse_default_instance_;
class SessionState_OauthKeysEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionState_OauthKeysEntry_DoNotUse>
      _instance;
} _SessionState_OauthKeysEntry_DoNotUse_default_instance_;
class SessionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionState>
      _instance;
} _SessionState_default_instance_;
}  // namespace coprocess
namespace protobuf_coprocess_5fsession_5fstate_2eproto {
static void InitDefaultsAccessSpec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_AccessSpec_default_instance_;
    new (ptr) ::coprocess::AccessSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::AccessSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccessSpec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccessSpec}, {}};

static void InitDefaultsAccessDefinition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_AccessDefinition_default_instance_;
    new (ptr) ::coprocess::AccessDefinition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::AccessDefinition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccessDefinition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccessDefinition}, {
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessSpec.base,}};

static void InitDefaultsBasicAuthData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_BasicAuthData_default_instance_;
    new (ptr) ::coprocess::BasicAuthData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::BasicAuthData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasicAuthData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasicAuthData}, {}};

static void InitDefaultsJWTData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_JWTData_default_instance_;
    new (ptr) ::coprocess::JWTData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::JWTData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JWTData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJWTData}, {}};

static void InitDefaultsMonitor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_Monitor_default_instance_;
    new (ptr) ::coprocess::Monitor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::Monitor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Monitor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMonitor}, {}};

static void InitDefaultsSessionState_AccessRightsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_SessionState_AccessRightsEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::SessionState_AccessRightsEntry_DoNotUse();
  }
  ::coprocess::SessionState_AccessRightsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SessionState_AccessRightsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSessionState_AccessRightsEntry_DoNotUse}, {
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessDefinition.base,}};

static void InitDefaultsSessionState_OauthKeysEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_SessionState_OauthKeysEntry_DoNotUse_default_instance_;
    new (ptr) ::coprocess::SessionState_OauthKeysEntry_DoNotUse();
  }
  ::coprocess::SessionState_OauthKeysEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SessionState_OauthKeysEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSessionState_OauthKeysEntry_DoNotUse}, {}};

static void InitDefaultsSessionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coprocess::_SessionState_default_instance_;
    new (ptr) ::coprocess::SessionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coprocess::SessionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SessionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSessionState}, {
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_SessionState_AccessRightsEntry_DoNotUse.base,
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_SessionState_OauthKeysEntry_DoNotUse.base,
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_BasicAuthData.base,
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_JWTData.base,
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_Monitor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AccessSpec.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccessDefinition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicAuthData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JWTData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Monitor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionState_AccessRightsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionState_OauthKeysEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionState.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessSpec, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessSpec, methods_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessDefinition, api_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessDefinition, api_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessDefinition, versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::AccessDefinition, allowed_urls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::BasicAuthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::BasicAuthData, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::BasicAuthData, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::JWTData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::JWTData, secret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::Monitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::Monitor, trigger_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_AccessRightsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_AccessRightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_AccessRightsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_AccessRightsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_OauthKeysEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_OauthKeysEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_OauthKeysEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState_OauthKeysEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, last_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, allowance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, per_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, expires_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, quota_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, quota_renews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, quota_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, quota_renewal_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, access_rights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, org_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, oauth_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, oauth_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, basic_auth_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, jwt_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, hmac_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, hmac_secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, is_inactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, apply_policy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, data_expires_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, monitor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, enable_detailed_recording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, last_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, id_extractor_deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coprocess::SessionState, session_lifetime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coprocess::AccessSpec)},
  { 7, -1, sizeof(::coprocess::AccessDefinition)},
  { 16, -1, sizeof(::coprocess::BasicAuthData)},
  { 23, -1, sizeof(::coprocess::JWTData)},
  { 29, -1, sizeof(::coprocess::Monitor)},
  { 35, 42, sizeof(::coprocess::SessionState_AccessRightsEntry_DoNotUse)},
  { 44, 51, sizeof(::coprocess::SessionState_OauthKeysEntry_DoNotUse)},
  { 53, -1, sizeof(::coprocess::SessionState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_AccessSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_AccessDefinition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_BasicAuthData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_JWTData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_Monitor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_SessionState_AccessRightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_SessionState_OauthKeysEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::coprocess::_SessionState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "coprocess_session_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035coprocess_session_state.proto\022\tcoproce"
      "ss\"*\n\nAccessSpec\022\013\n\003url\030\001 \001(\t\022\017\n\007methods"
      "\030\002 \003(\t\"s\n\020AccessDefinition\022\020\n\010api_name\030\001"
      " \001(\t\022\016\n\006api_id\030\002 \001(\t\022\020\n\010versions\030\003 \003(\t\022+"
      "\n\014allowed_urls\030\004 \003(\0132\025.coprocess.AccessS"
      "pec\"/\n\rBasicAuthData\022\020\n\010password\030\001 \001(\t\022\014"
      "\n\004hash\030\002 \001(\t\"\031\n\007JWTData\022\016\n\006secret\030\001 \001(\t\""
      "!\n\007Monitor\022\026\n\016trigger_limits\030\001 \003(\001\"\370\006\n\014S"
      "essionState\022\022\n\nlast_check\030\001 \001(\003\022\021\n\tallow"
      "ance\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\013\n\003per\030\004 \001(\001\022\017\n"
      "\007expires\030\005 \001(\003\022\021\n\tquota_max\030\006 \001(\003\022\024\n\014quo"
      "ta_renews\030\007 \001(\003\022\027\n\017quota_remaining\030\010 \001(\003"
      "\022\032\n\022quota_renewal_rate\030\t \001(\003\022@\n\raccess_r"
      "ights\030\n \003(\0132).coprocess.SessionState.Acc"
      "essRightsEntry\022\016\n\006org_id\030\013 \001(\t\022\027\n\017oauth_"
      "client_id\030\014 \001(\t\022:\n\noauth_keys\030\r \003(\0132&.co"
      "process.SessionState.OauthKeysEntry\0221\n\017b"
      "asic_auth_data\030\016 \001(\0132\030.coprocess.BasicAu"
      "thData\022$\n\010jwt_data\030\017 \001(\0132\022.coprocess.JWT"
      "Data\022\024\n\014hmac_enabled\030\020 \001(\010\022\023\n\013hmac_secre"
      "t\030\021 \001(\t\022\023\n\013is_inactive\030\022 \001(\010\022\027\n\017apply_po"
      "licy_id\030\023 \001(\t\022\024\n\014data_expires\030\024 \001(\003\022#\n\007m"
      "onitor\030\025 \001(\0132\022.coprocess.Monitor\022!\n\031enab"
      "le_detailed_recording\030\026 \001(\010\022\020\n\010metadata\030"
      "\027 \001(\t\022\014\n\004tags\030\030 \003(\t\022\r\n\005alias\030\031 \001(\t\022\024\n\014la"
      "st_updated\030\032 \001(\t\022\035\n\025id_extractor_deadlin"
      "e\030\033 \001(\003\022\030\n\020session_lifetime\030\034 \001(\003\032P\n\021Acc"
      "essRightsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001"
      "(\0132\033.coprocess.AccessDefinition:\0028\001\0320\n\016O"
      "authKeysEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\t:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "coprocess_session_state.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_coprocess_5fsession_5fstate_2eproto
namespace coprocess {

// ===================================================================

void AccessSpec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessSpec::kUrlFieldNumber;
const int AccessSpec::kMethodsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessSpec::AccessSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessSpec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.AccessSpec)
}
AccessSpec::AccessSpec(const AccessSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      methods_(from.methods_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:coprocess.AccessSpec)
}

void AccessSpec::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccessSpec::~AccessSpec() {
  // @@protoc_insertion_point(destructor:coprocess.AccessSpec)
  SharedDtor();
}

void AccessSpec::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessSpec::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessSpec& AccessSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessSpec.base);
  return *internal_default_instance();
}


void AccessSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.AccessSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  methods_.Clear();
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccessSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.AccessSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.AccessSpec.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string methods = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_methods()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->methods(this->methods_size() - 1).data(),
            static_cast<int>(this->methods(this->methods_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.AccessSpec.methods"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.AccessSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.AccessSpec)
  return false;
#undef DO_
}

void AccessSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.AccessSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessSpec.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string methods = 2;
  for (int i = 0, n = this->methods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->methods(i).data(), static_cast<int>(this->methods(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessSpec.methods");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->methods(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.AccessSpec)
}

::google::protobuf::uint8* AccessSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.AccessSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessSpec.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string methods = 2;
  for (int i = 0, n = this->methods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->methods(i).data(), static_cast<int>(this->methods(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessSpec.methods");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->methods(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.AccessSpec)
  return target;
}

size_t AccessSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.AccessSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string methods = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->methods_size());
  for (int i = 0, n = this->methods_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->methods(i));
  }

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.AccessSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.AccessSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.AccessSpec)
    MergeFrom(*source);
  }
}

void AccessSpec::MergeFrom(const AccessSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.AccessSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  methods_.MergeFrom(from.methods_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void AccessSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.AccessSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessSpec::CopyFrom(const AccessSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.AccessSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessSpec::IsInitialized() const {
  return true;
}

void AccessSpec::Swap(AccessSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessSpec::InternalSwap(AccessSpec* other) {
  using std::swap;
  methods_.InternalSwap(CastToBase(&other->methods_));
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessSpec::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccessDefinition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDefinition::kApiNameFieldNumber;
const int AccessDefinition::kApiIdFieldNumber;
const int AccessDefinition::kVersionsFieldNumber;
const int AccessDefinition::kAllowedUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDefinition::AccessDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessDefinition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.AccessDefinition)
}
AccessDefinition::AccessDefinition(const AccessDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      versions_(from.versions_),
      allowed_urls_(from.allowed_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_name().size() > 0) {
    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  api_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_id().size() > 0) {
    api_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_id_);
  }
  // @@protoc_insertion_point(copy_constructor:coprocess.AccessDefinition)
}

void AccessDefinition::SharedCtor() {
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccessDefinition::~AccessDefinition() {
  // @@protoc_insertion_point(destructor:coprocess.AccessDefinition)
  SharedDtor();
}

void AccessDefinition::SharedDtor() {
  api_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccessDefinition::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessDefinition& AccessDefinition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_AccessDefinition.base);
  return *internal_default_instance();
}


void AccessDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.AccessDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  allowed_urls_.Clear();
  api_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AccessDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.AccessDefinition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string api_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_name().data(), static_cast<int>(this->api_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.AccessDefinition.api_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_id().data(), static_cast<int>(this->api_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.AccessDefinition.api_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string versions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_versions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->versions(this->versions_size() - 1).data(),
            static_cast<int>(this->versions(this->versions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.AccessDefinition.versions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .coprocess.AccessSpec allowed_urls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_allowed_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.AccessDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.AccessDefinition)
  return false;
#undef DO_
}

void AccessDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.AccessDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.api_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->api_name(), output);
  }

  // string api_id = 2;
  if (this->api_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_id().data(), static_cast<int>(this->api_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.api_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->api_id(), output);
  }

  // repeated string versions = 3;
  for (int i = 0, n = this->versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versions(i).data(), static_cast<int>(this->versions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.versions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->versions(i), output);
  }

  // repeated .coprocess.AccessSpec allowed_urls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->allowed_urls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.AccessDefinition)
}

::google::protobuf::uint8* AccessDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.AccessDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.api_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->api_name(), target);
  }

  // string api_id = 2;
  if (this->api_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_id().data(), static_cast<int>(this->api_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.api_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_id(), target);
  }

  // repeated string versions = 3;
  for (int i = 0, n = this->versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versions(i).data(), static_cast<int>(this->versions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.AccessDefinition.versions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->versions(i), target);
  }

  // repeated .coprocess.AccessSpec allowed_urls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->allowed_urls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.AccessDefinition)
  return target;
}

size_t AccessDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.AccessDefinition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string versions = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->versions_size());
  for (int i = 0, n = this->versions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->versions(i));
  }

  // repeated .coprocess.AccessSpec allowed_urls = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->allowed_urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->allowed_urls(static_cast<int>(i)));
    }
  }

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_name());
  }

  // string api_id = 2;
  if (this->api_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.AccessDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessDefinition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.AccessDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.AccessDefinition)
    MergeFrom(*source);
  }
}

void AccessDefinition::MergeFrom(const AccessDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.AccessDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  allowed_urls_.MergeFrom(from.allowed_urls_);
  if (from.api_name().size() > 0) {

    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  if (from.api_id().size() > 0) {

    api_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_id_);
  }
}

void AccessDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.AccessDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDefinition::CopyFrom(const AccessDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.AccessDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDefinition::IsInitialized() const {
  return true;
}

void AccessDefinition::Swap(AccessDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDefinition::InternalSwap(AccessDefinition* other) {
  using std::swap;
  versions_.InternalSwap(CastToBase(&other->versions_));
  CastToBase(&allowed_urls_)->InternalSwap(CastToBase(&other->allowed_urls_));
  api_name_.Swap(&other->api_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  api_id_.Swap(&other->api_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccessDefinition::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicAuthData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicAuthData::kPasswordFieldNumber;
const int BasicAuthData::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicAuthData::BasicAuthData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_BasicAuthData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.BasicAuthData)
}
BasicAuthData::BasicAuthData(const BasicAuthData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:coprocess.BasicAuthData)
}

void BasicAuthData::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BasicAuthData::~BasicAuthData() {
  // @@protoc_insertion_point(destructor:coprocess.BasicAuthData)
  SharedDtor();
}

void BasicAuthData::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasicAuthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicAuthData::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicAuthData& BasicAuthData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_BasicAuthData.base);
  return *internal_default_instance();
}


void BasicAuthData::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.BasicAuthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasicAuthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.BasicAuthData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.BasicAuthData.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.BasicAuthData.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.BasicAuthData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.BasicAuthData)
  return false;
#undef DO_
}

void BasicAuthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.BasicAuthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.BasicAuthData.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.BasicAuthData.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.BasicAuthData)
}

::google::protobuf::uint8* BasicAuthData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.BasicAuthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.BasicAuthData.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.BasicAuthData.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.BasicAuthData)
  return target;
}

size_t BasicAuthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.BasicAuthData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string password = 1;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicAuthData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.BasicAuthData)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicAuthData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicAuthData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.BasicAuthData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.BasicAuthData)
    MergeFrom(*source);
  }
}

void BasicAuthData::MergeFrom(const BasicAuthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.BasicAuthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void BasicAuthData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.BasicAuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicAuthData::CopyFrom(const BasicAuthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.BasicAuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicAuthData::IsInitialized() const {
  return true;
}

void BasicAuthData::Swap(BasicAuthData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicAuthData::InternalSwap(BasicAuthData* other) {
  using std::swap;
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicAuthData::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JWTData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JWTData::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JWTData::JWTData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_JWTData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.JWTData)
}
JWTData::JWTData(const JWTData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  // @@protoc_insertion_point(copy_constructor:coprocess.JWTData)
}

void JWTData::SharedCtor() {
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JWTData::~JWTData() {
  // @@protoc_insertion_point(destructor:coprocess.JWTData)
  SharedDtor();
}

void JWTData::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JWTData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JWTData::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JWTData& JWTData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_JWTData.base);
  return *internal_default_instance();
}


void JWTData::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.JWTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JWTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.JWTData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string secret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.JWTData.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.JWTData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.JWTData)
  return false;
#undef DO_
}

void JWTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.JWTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string secret = 1;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.JWTData.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->secret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.JWTData)
}

::google::protobuf::uint8* JWTData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.JWTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string secret = 1;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.JWTData.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.JWTData)
  return target;
}

size_t JWTData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.JWTData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string secret = 1;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.JWTData)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JWTData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.JWTData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.JWTData)
    MergeFrom(*source);
  }
}

void JWTData::MergeFrom(const JWTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.JWTData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
}

void JWTData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.JWTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTData::CopyFrom(const JWTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.JWTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTData::IsInitialized() const {
  return true;
}

void JWTData::Swap(JWTData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JWTData::InternalSwap(JWTData* other) {
  using std::swap;
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JWTData::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Monitor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitor::kTriggerLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitor::Monitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_Monitor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.Monitor)
}
Monitor::Monitor(const Monitor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trigger_limits_(from.trigger_limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coprocess.Monitor)
}

void Monitor::SharedCtor() {
}

Monitor::~Monitor() {
  // @@protoc_insertion_point(destructor:coprocess.Monitor)
  SharedDtor();
}

void Monitor::SharedDtor() {
}

void Monitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Monitor::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Monitor& Monitor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_Monitor.base);
  return *internal_default_instance();
}


void Monitor::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.Monitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_limits_.Clear();
  _internal_metadata_.Clear();
}

bool Monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.Monitor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double trigger_limits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_trigger_limits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_trigger_limits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.Monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.Monitor)
  return false;
#undef DO_
}

void Monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.Monitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double trigger_limits = 1;
  if (this->trigger_limits_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _trigger_limits_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->trigger_limits().data(), this->trigger_limits_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.Monitor)
}

::google::protobuf::uint8* Monitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.Monitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double trigger_limits = 1;
  if (this->trigger_limits_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _trigger_limits_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->trigger_limits_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.Monitor)
  return target;
}

size_t Monitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.Monitor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double trigger_limits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trigger_limits_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _trigger_limits_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Monitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  const Monitor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Monitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.Monitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.Monitor)
    MergeFrom(*source);
  }
}

void Monitor::MergeFrom(const Monitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trigger_limits_.MergeFrom(from.trigger_limits_);
}

void Monitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monitor::CopyFrom(const Monitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitor::IsInitialized() const {
  return true;
}

void Monitor::Swap(Monitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitor::InternalSwap(Monitor* other) {
  using std::swap;
  trigger_limits_.InternalSwap(&other->trigger_limits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Monitor::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SessionState_AccessRightsEntry_DoNotUse::SessionState_AccessRightsEntry_DoNotUse() {}
SessionState_AccessRightsEntry_DoNotUse::SessionState_AccessRightsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SessionState_AccessRightsEntry_DoNotUse::MergeFrom(const SessionState_AccessRightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SessionState_AccessRightsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[5];
}
void SessionState_AccessRightsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SessionState_OauthKeysEntry_DoNotUse::SessionState_OauthKeysEntry_DoNotUse() {}
SessionState_OauthKeysEntry_DoNotUse::SessionState_OauthKeysEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SessionState_OauthKeysEntry_DoNotUse::MergeFrom(const SessionState_OauthKeysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SessionState_OauthKeysEntry_DoNotUse::GetMetadata() const {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[6];
}
void SessionState_OauthKeysEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SessionState::InitAsDefaultInstance() {
  ::coprocess::_SessionState_default_instance_._instance.get_mutable()->basic_auth_data_ = const_cast< ::coprocess::BasicAuthData*>(
      ::coprocess::BasicAuthData::internal_default_instance());
  ::coprocess::_SessionState_default_instance_._instance.get_mutable()->jwt_data_ = const_cast< ::coprocess::JWTData*>(
      ::coprocess::JWTData::internal_default_instance());
  ::coprocess::_SessionState_default_instance_._instance.get_mutable()->monitor_ = const_cast< ::coprocess::Monitor*>(
      ::coprocess::Monitor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionState::kLastCheckFieldNumber;
const int SessionState::kAllowanceFieldNumber;
const int SessionState::kRateFieldNumber;
const int SessionState::kPerFieldNumber;
const int SessionState::kExpiresFieldNumber;
const int SessionState::kQuotaMaxFieldNumber;
const int SessionState::kQuotaRenewsFieldNumber;
const int SessionState::kQuotaRemainingFieldNumber;
const int SessionState::kQuotaRenewalRateFieldNumber;
const int SessionState::kAccessRightsFieldNumber;
const int SessionState::kOrgIdFieldNumber;
const int SessionState::kOauthClientIdFieldNumber;
const int SessionState::kOauthKeysFieldNumber;
const int SessionState::kBasicAuthDataFieldNumber;
const int SessionState::kJwtDataFieldNumber;
const int SessionState::kHmacEnabledFieldNumber;
const int SessionState::kHmacSecretFieldNumber;
const int SessionState::kIsInactiveFieldNumber;
const int SessionState::kApplyPolicyIdFieldNumber;
const int SessionState::kDataExpiresFieldNumber;
const int SessionState::kMonitorFieldNumber;
const int SessionState::kEnableDetailedRecordingFieldNumber;
const int SessionState::kMetadataFieldNumber;
const int SessionState::kTagsFieldNumber;
const int SessionState::kAliasFieldNumber;
const int SessionState::kLastUpdatedFieldNumber;
const int SessionState::kIdExtractorDeadlineFieldNumber;
const int SessionState::kSessionLifetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionState::SessionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_SessionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.SessionState)
}
SessionState::SessionState(const SessionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_rights_.MergeFrom(from.access_rights_);
  oauth_keys_.MergeFrom(from.oauth_keys_);
  org_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.org_id().size() > 0) {
    org_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.org_id_);
  }
  oauth_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.oauth_client_id().size() > 0) {
    oauth_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_client_id_);
  }
  hmac_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hmac_secret().size() > 0) {
    hmac_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmac_secret_);
  }
  apply_policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apply_policy_id().size() > 0) {
    apply_policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apply_policy_id_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  last_updated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_updated().size() > 0) {
    last_updated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_updated_);
  }
  if (from.has_basic_auth_data()) {
    basic_auth_data_ = new ::coprocess::BasicAuthData(*from.basic_auth_data_);
  } else {
    basic_auth_data_ = NULL;
  }
  if (from.has_jwt_data()) {
    jwt_data_ = new ::coprocess::JWTData(*from.jwt_data_);
  } else {
    jwt_data_ = NULL;
  }
  if (from.has_monitor()) {
    monitor_ = new ::coprocess::Monitor(*from.monitor_);
  } else {
    monitor_ = NULL;
  }
  ::memcpy(&last_check_, &from.last_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_detailed_recording_) -
    reinterpret_cast<char*>(&last_check_)) + sizeof(enable_detailed_recording_));
  // @@protoc_insertion_point(copy_constructor:coprocess.SessionState)
}

void SessionState::SharedCtor() {
  org_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hmac_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_updated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&basic_auth_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_detailed_recording_) -
      reinterpret_cast<char*>(&basic_auth_data_)) + sizeof(enable_detailed_recording_));
}

SessionState::~SessionState() {
  // @@protoc_insertion_point(destructor:coprocess.SessionState)
  SharedDtor();
}

void SessionState::SharedDtor() {
  org_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hmac_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_policy_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_updated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_auth_data_;
  if (this != internal_default_instance()) delete jwt_data_;
  if (this != internal_default_instance()) delete monitor_;
}

void SessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionState::descriptor() {
  ::protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionState& SessionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_coprocess_5fsession_5fstate_2eproto::scc_info_SessionState.base);
  return *internal_default_instance();
}


void SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_rights_.Clear();
  oauth_keys_.Clear();
  tags_.Clear();
  org_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hmac_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_policy_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_updated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && basic_auth_data_ != NULL) {
    delete basic_auth_data_;
  }
  basic_auth_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && jwt_data_ != NULL) {
    delete jwt_data_;
  }
  jwt_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && monitor_ != NULL) {
    delete monitor_;
  }
  monitor_ = NULL;
  ::memset(&last_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_detailed_recording_) -
      reinterpret_cast<char*>(&last_check_)) + sizeof(enable_detailed_recording_));
  _internal_metadata_.Clear();
}

bool SessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.SessionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 last_check = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double allowance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &allowance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double per = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &per_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expires = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quota_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quota_renews = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_renews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quota_remaining = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quota_renewal_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_renewal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .coprocess.AccessDefinition> access_rights = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          SessionState_AccessRightsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SessionState_AccessRightsEntry_DoNotUse,
              ::std::string, ::coprocess::AccessDefinition,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition > > parser(&access_rights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.AccessRightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string org_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_org_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->org_id().data(), static_cast<int>(this->org_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.org_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oauth_client_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oauth_client_id().data(), static_cast<int>(this->oauth_client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.oauth_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> oauth_keys = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          SessionState_OauthKeysEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SessionState_OauthKeysEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&oauth_keys_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.OauthKeysEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.OauthKeysEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .coprocess.BasicAuthData basic_auth_data = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basic_auth_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .coprocess.JWTData jwt_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jwt_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hmac_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hmac_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hmac_secret = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hmac_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hmac_secret().data(), static_cast<int>(this->hmac_secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.hmac_secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_inactive = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string apply_policy_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apply_policy_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apply_policy_id().data(), static_cast<int>(this->apply_policy_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.apply_policy_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data_expires = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .coprocess.Monitor monitor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_detailed_recording = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_detailed_recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_updated = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_updated()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_updated().data(), static_cast<int>(this->last_updated().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.SessionState.last_updated"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id_extractor_deadline = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_extractor_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 session_lifetime = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.SessionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.SessionState)
  return false;
#undef DO_
}

void SessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_check = 1;
  if (this->last_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_check(), output);
  }

  // double allowance = 2;
  if (this->allowance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->allowance(), output);
  }

  // double rate = 3;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rate(), output);
  }

  // double per = 4;
  if (this->per() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->per(), output);
  }

  // int64 expires = 5;
  if (this->expires() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expires(), output);
  }

  // int64 quota_max = 6;
  if (this->quota_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->quota_max(), output);
  }

  // int64 quota_renews = 7;
  if (this->quota_renews() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->quota_renews(), output);
  }

  // int64 quota_remaining = 8;
  if (this->quota_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->quota_remaining(), output);
  }

  // int64 quota_renewal_rate = 9;
  if (this->quota_renewal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->quota_renewal_rate(), output);
  }

  // map<string, .coprocess.AccessDefinition> access_rights = 10;
  if (!this->access_rights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.AccessRightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->access_rights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->access_rights().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_iterator
          it = this->access_rights().begin();
          it != this->access_rights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SessionState_AccessRightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(access_rights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SessionState_AccessRightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_iterator
          it = this->access_rights().begin();
          it != this->access_rights().end(); ++it) {
        entry.reset(access_rights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string org_id = 11;
  if (this->org_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->org_id().data(), static_cast<int>(this->org_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.org_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->org_id(), output);
  }

  // string oauth_client_id = 12;
  if (this->oauth_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_client_id().data(), static_cast<int>(this->oauth_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.oauth_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->oauth_client_id(), output);
  }

  // map<string, string> oauth_keys = 13;
  if (!this->oauth_keys().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.OauthKeysEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.OauthKeysEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->oauth_keys().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->oauth_keys().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->oauth_keys().begin();
          it != this->oauth_keys().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SessionState_OauthKeysEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(oauth_keys_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SessionState_OauthKeysEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->oauth_keys().begin();
          it != this->oauth_keys().end(); ++it) {
        entry.reset(oauth_keys_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .coprocess.BasicAuthData basic_auth_data = 14;
  if (this->has_basic_auth_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_basic_auth_data(), output);
  }

  // .coprocess.JWTData jwt_data = 15;
  if (this->has_jwt_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_jwt_data(), output);
  }

  // bool hmac_enabled = 16;
  if (this->hmac_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->hmac_enabled(), output);
  }

  // string hmac_secret = 17;
  if (this->hmac_secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmac_secret().data(), static_cast<int>(this->hmac_secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.hmac_secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->hmac_secret(), output);
  }

  // bool is_inactive = 18;
  if (this->is_inactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_inactive(), output);
  }

  // string apply_policy_id = 19;
  if (this->apply_policy_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_policy_id().data(), static_cast<int>(this->apply_policy_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.apply_policy_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->apply_policy_id(), output);
  }

  // int64 data_expires = 20;
  if (this->data_expires() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->data_expires(), output);
  }

  // .coprocess.Monitor monitor = 21;
  if (this->has_monitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_monitor(), output);
  }

  // bool enable_detailed_recording = 22;
  if (this->enable_detailed_recording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enable_detailed_recording(), output);
  }

  // string metadata = 23;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->metadata(), output);
  }

  // repeated string tags = 24;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tags(i), output);
  }

  // string alias = 25;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->alias(), output);
  }

  // string last_updated = 26;
  if (this->last_updated().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_updated().data(), static_cast<int>(this->last_updated().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.last_updated");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->last_updated(), output);
  }

  // int64 id_extractor_deadline = 27;
  if (this->id_extractor_deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->id_extractor_deadline(), output);
  }

  // int64 session_lifetime = 28;
  if (this->session_lifetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->session_lifetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coprocess.SessionState)
}

::google::protobuf::uint8* SessionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocess.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_check = 1;
  if (this->last_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_check(), target);
  }

  // double allowance = 2;
  if (this->allowance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->allowance(), target);
  }

  // double rate = 3;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rate(), target);
  }

  // double per = 4;
  if (this->per() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->per(), target);
  }

  // int64 expires = 5;
  if (this->expires() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expires(), target);
  }

  // int64 quota_max = 6;
  if (this->quota_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->quota_max(), target);
  }

  // int64 quota_renews = 7;
  if (this->quota_renews() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->quota_renews(), target);
  }

  // int64 quota_remaining = 8;
  if (this->quota_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->quota_remaining(), target);
  }

  // int64 quota_renewal_rate = 9;
  if (this->quota_renewal_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->quota_renewal_rate(), target);
  }

  // map<string, .coprocess.AccessDefinition> access_rights = 10;
  if (!this->access_rights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.AccessRightsEntry.key");
      }
    };

    if (deterministic &&
        this->access_rights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->access_rights().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_iterator
          it = this->access_rights().begin();
          it != this->access_rights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SessionState_AccessRightsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(access_rights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SessionState_AccessRightsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_iterator
          it = this->access_rights().begin();
          it != this->access_rights().end(); ++it) {
        entry.reset(access_rights_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string org_id = 11;
  if (this->org_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->org_id().data(), static_cast<int>(this->org_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.org_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->org_id(), target);
  }

  // string oauth_client_id = 12;
  if (this->oauth_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_client_id().data(), static_cast<int>(this->oauth_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.oauth_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->oauth_client_id(), target);
  }

  // map<string, string> oauth_keys = 13;
  if (!this->oauth_keys().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.OauthKeysEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "coprocess.SessionState.OauthKeysEntry.value");
      }
    };

    if (deterministic &&
        this->oauth_keys().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->oauth_keys().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->oauth_keys().begin();
          it != this->oauth_keys().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SessionState_OauthKeysEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(oauth_keys_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SessionState_OauthKeysEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->oauth_keys().begin();
          it != this->oauth_keys().end(); ++it) {
        entry.reset(oauth_keys_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .coprocess.BasicAuthData basic_auth_data = 14;
  if (this->has_basic_auth_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_basic_auth_data(), deterministic, target);
  }

  // .coprocess.JWTData jwt_data = 15;
  if (this->has_jwt_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_jwt_data(), deterministic, target);
  }

  // bool hmac_enabled = 16;
  if (this->hmac_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->hmac_enabled(), target);
  }

  // string hmac_secret = 17;
  if (this->hmac_secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmac_secret().data(), static_cast<int>(this->hmac_secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.hmac_secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->hmac_secret(), target);
  }

  // bool is_inactive = 18;
  if (this->is_inactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_inactive(), target);
  }

  // string apply_policy_id = 19;
  if (this->apply_policy_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_policy_id().data(), static_cast<int>(this->apply_policy_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.apply_policy_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->apply_policy_id(), target);
  }

  // int64 data_expires = 20;
  if (this->data_expires() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->data_expires(), target);
  }

  // .coprocess.Monitor monitor = 21;
  if (this->has_monitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_monitor(), deterministic, target);
  }

  // bool enable_detailed_recording = 22;
  if (this->enable_detailed_recording() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enable_detailed_recording(), target);
  }

  // string metadata = 23;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->metadata(), target);
  }

  // repeated string tags = 24;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->tags(i), target);
  }

  // string alias = 25;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->alias(), target);
  }

  // string last_updated = 26;
  if (this->last_updated().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_updated().data(), static_cast<int>(this->last_updated().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.SessionState.last_updated");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->last_updated(), target);
  }

  // int64 id_extractor_deadline = 27;
  if (this->id_extractor_deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->id_extractor_deadline(), target);
  }

  // int64 session_lifetime = 28;
  if (this->session_lifetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->session_lifetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coprocess.SessionState)
  return target;
}

size_t SessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.SessionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .coprocess.AccessDefinition> access_rights = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->access_rights_size());
  {
    ::std::unique_ptr<SessionState_AccessRightsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >::const_iterator
        it = this->access_rights().begin();
        it != this->access_rights().end(); ++it) {
      entry.reset(access_rights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> oauth_keys = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->oauth_keys_size());
  {
    ::std::unique_ptr<SessionState_OauthKeysEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->oauth_keys().begin();
        it != this->oauth_keys().end(); ++it) {
      entry.reset(oauth_keys_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string tags = 24;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string org_id = 11;
  if (this->org_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->org_id());
  }

  // string oauth_client_id = 12;
  if (this->oauth_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oauth_client_id());
  }

  // string hmac_secret = 17;
  if (this->hmac_secret().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hmac_secret());
  }

  // string apply_policy_id = 19;
  if (this->apply_policy_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apply_policy_id());
  }

  // string metadata = 23;
  if (this->metadata().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // string alias = 25;
  if (this->alias().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string last_updated = 26;
  if (this->last_updated().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_updated());
  }

  // .coprocess.BasicAuthData basic_auth_data = 14;
  if (this->has_basic_auth_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *basic_auth_data_);
  }

  // .coprocess.JWTData jwt_data = 15;
  if (this->has_jwt_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jwt_data_);
  }

  // .coprocess.Monitor monitor = 21;
  if (this->has_monitor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *monitor_);
  }

  // int64 last_check = 1;
  if (this->last_check() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_check());
  }

  // double allowance = 2;
  if (this->allowance() != 0) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (this->rate() != 0) {
    total_size += 1 + 8;
  }

  // double per = 4;
  if (this->per() != 0) {
    total_size += 1 + 8;
  }

  // int64 expires = 5;
  if (this->expires() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires());
  }

  // int64 quota_max = 6;
  if (this->quota_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quota_max());
  }

  // int64 quota_renews = 7;
  if (this->quota_renews() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quota_renews());
  }

  // int64 quota_remaining = 8;
  if (this->quota_remaining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quota_remaining());
  }

  // int64 quota_renewal_rate = 9;
  if (this->quota_renewal_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quota_renewal_rate());
  }

  // int64 data_expires = 20;
  if (this->data_expires() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data_expires());
  }

  // int64 id_extractor_deadline = 27;
  if (this->id_extractor_deadline() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id_extractor_deadline());
  }

  // int64 session_lifetime = 28;
  if (this->session_lifetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_lifetime());
  }

  // bool hmac_enabled = 16;
  if (this->hmac_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool is_inactive = 18;
  if (this->is_inactive() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_detailed_recording = 22;
  if (this->enable_detailed_recording() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocess.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocess.SessionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocess.SessionState)
    MergeFrom(*source);
  }
}

void SessionState::MergeFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  access_rights_.MergeFrom(from.access_rights_);
  oauth_keys_.MergeFrom(from.oauth_keys_);
  tags_.MergeFrom(from.tags_);
  if (from.org_id().size() > 0) {

    org_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.org_id_);
  }
  if (from.oauth_client_id().size() > 0) {

    oauth_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_client_id_);
  }
  if (from.hmac_secret().size() > 0) {

    hmac_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmac_secret_);
  }
  if (from.apply_policy_id().size() > 0) {

    apply_policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apply_policy_id_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.last_updated().size() > 0) {

    last_updated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_updated_);
  }
  if (from.has_basic_auth_data()) {
    mutable_basic_auth_data()->::coprocess::BasicAuthData::MergeFrom(from.basic_auth_data());
  }
  if (from.has_jwt_data()) {
    mutable_jwt_data()->::coprocess::JWTData::MergeFrom(from.jwt_data());
  }
  if (from.has_monitor()) {
    mutable_monitor()->::coprocess::Monitor::MergeFrom(from.monitor());
  }
  if (from.last_check() != 0) {
    set_last_check(from.last_check());
  }
  if (from.allowance() != 0) {
    set_allowance(from.allowance());
  }
  if (from.rate() != 0) {
    set_rate(from.rate());
  }
  if (from.per() != 0) {
    set_per(from.per());
  }
  if (from.expires() != 0) {
    set_expires(from.expires());
  }
  if (from.quota_max() != 0) {
    set_quota_max(from.quota_max());
  }
  if (from.quota_renews() != 0) {
    set_quota_renews(from.quota_renews());
  }
  if (from.quota_remaining() != 0) {
    set_quota_remaining(from.quota_remaining());
  }
  if (from.quota_renewal_rate() != 0) {
    set_quota_renewal_rate(from.quota_renewal_rate());
  }
  if (from.data_expires() != 0) {
    set_data_expires(from.data_expires());
  }
  if (from.id_extractor_deadline() != 0) {
    set_id_extractor_deadline(from.id_extractor_deadline());
  }
  if (from.session_lifetime() != 0) {
    set_session_lifetime(from.session_lifetime());
  }
  if (from.hmac_enabled() != 0) {
    set_hmac_enabled(from.hmac_enabled());
  }
  if (from.is_inactive() != 0) {
    set_is_inactive(from.is_inactive());
  }
  if (from.enable_detailed_recording() != 0) {
    set_enable_detailed_recording(from.enable_detailed_recording());
  }
}

void SessionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocess.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionState::CopyFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionState::IsInitialized() const {
  return true;
}

void SessionState::Swap(SessionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionState::InternalSwap(SessionState* other) {
  using std::swap;
  access_rights_.Swap(&other->access_rights_);
  oauth_keys_.Swap(&other->oauth_keys_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  org_id_.Swap(&other->org_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oauth_client_id_.Swap(&other->oauth_client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hmac_secret_.Swap(&other->hmac_secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  apply_policy_id_.Swap(&other->apply_policy_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alias_.Swap(&other->alias_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_updated_.Swap(&other->last_updated_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_auth_data_, other->basic_auth_data_);
  swap(jwt_data_, other->jwt_data_);
  swap(monitor_, other->monitor_);
  swap(last_check_, other->last_check_);
  swap(allowance_, other->allowance_);
  swap(rate_, other->rate_);
  swap(per_, other->per_);
  swap(expires_, other->expires_);
  swap(quota_max_, other->quota_max_);
  swap(quota_renews_, other->quota_renews_);
  swap(quota_remaining_, other->quota_remaining_);
  swap(quota_renewal_rate_, other->quota_renewal_rate_);
  swap(data_expires_, other->data_expires_);
  swap(id_extractor_deadline_, other->id_extractor_deadline_);
  swap(session_lifetime_, other->session_lifetime_);
  swap(hmac_enabled_, other->hmac_enabled_);
  swap(is_inactive_, other->is_inactive_);
  swap(enable_detailed_recording_, other->enable_detailed_recording_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionState::GetMetadata() const {
  protobuf_coprocess_5fsession_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_coprocess_5fsession_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coprocess
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::AccessSpec* Arena::CreateMaybeMessage< ::coprocess::AccessSpec >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::AccessSpec >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::AccessDefinition* Arena::CreateMaybeMessage< ::coprocess::AccessDefinition >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::AccessDefinition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::BasicAuthData* Arena::CreateMaybeMessage< ::coprocess::BasicAuthData >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::BasicAuthData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::JWTData* Arena::CreateMaybeMessage< ::coprocess::JWTData >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::JWTData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::Monitor* Arena::CreateMaybeMessage< ::coprocess::Monitor >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::Monitor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::SessionState_AccessRightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::SessionState_AccessRightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::SessionState_AccessRightsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::SessionState_OauthKeysEntry_DoNotUse* Arena::CreateMaybeMessage< ::coprocess::SessionState_OauthKeysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::SessionState_OauthKeysEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coprocess::SessionState* Arena::CreateMaybeMessage< ::coprocess::SessionState >(Arena* arena) {
  return Arena::CreateInternal< ::coprocess::SessionState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
