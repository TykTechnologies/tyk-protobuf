// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coprocess_object.proto

#include "coprocess_object.pb.h"
#include "coprocess_object.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace coprocess {

static const char* Dispatcher_method_names[] = {
  "/coprocess.Dispatcher/Dispatch",
  "/coprocess.Dispatcher/DispatchEvent",
};

std::unique_ptr< Dispatcher::Stub> Dispatcher::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Dispatcher::Stub> stub(new Dispatcher::Stub(channel));
  return stub;
}

Dispatcher::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Dispatch_(Dispatcher_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DispatchEvent_(Dispatcher_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Dispatcher::Stub::Dispatch(::grpc::ClientContext* context, const ::coprocess::Object& request, ::coprocess::Object* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Dispatch_, context, request, response);
}

void Dispatcher::Stub::experimental_async::Dispatch(::grpc::ClientContext* context, const ::coprocess::Object* request, ::coprocess::Object* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Dispatch_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::coprocess::Object>* Dispatcher::Stub::AsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocess::Object>::Create(channel_.get(), cq, rpcmethod_Dispatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coprocess::Object>* Dispatcher::Stub::PrepareAsyncDispatchRaw(::grpc::ClientContext* context, const ::coprocess::Object& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocess::Object>::Create(channel_.get(), cq, rpcmethod_Dispatch_, context, request, false);
}

::grpc::Status Dispatcher::Stub::DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event& request, ::coprocess::EventReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DispatchEvent_, context, request, response);
}

void Dispatcher::Stub::experimental_async::DispatchEvent(::grpc::ClientContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DispatchEvent_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>* Dispatcher::Stub::AsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocess::EventReply>::Create(channel_.get(), cq, rpcmethod_DispatchEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coprocess::EventReply>* Dispatcher::Stub::PrepareAsyncDispatchEventRaw(::grpc::ClientContext* context, const ::coprocess::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocess::EventReply>::Create(channel_.get(), cq, rpcmethod_DispatchEvent_, context, request, false);
}

Dispatcher::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dispatcher_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dispatcher::Service, ::coprocess::Object, ::coprocess::Object>(
          std::mem_fn(&Dispatcher::Service::Dispatch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dispatcher_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dispatcher::Service, ::coprocess::Event, ::coprocess::EventReply>(
          std::mem_fn(&Dispatcher::Service::DispatchEvent), this)));
}

Dispatcher::Service::~Service() {
}

::grpc::Status Dispatcher::Service::Dispatch(::grpc::ServerContext* context, const ::coprocess::Object* request, ::coprocess::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dispatcher::Service::DispatchEvent(::grpc::ServerContext* context, const ::coprocess::Event* request, ::coprocess::EventReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace coprocess

